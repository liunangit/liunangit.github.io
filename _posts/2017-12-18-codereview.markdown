---
author: liunan
comments: true
date: 2017-12-18
layout: post
title: 代码走查
---	


本来让我写这篇文章的时候，我的内心是拒绝的，因为我们空间iOS开发组早已将code reivew作为一项基本的日常事务来进行，就像每天享用免费早餐一样自然，不做反而觉得差点什么。但是听说<del>可能会有奖金</del> 可以和其他同学相互分享，共同提高。所以我决定把我们进行code review的一些经验分享出来，和大家一起分享和讨论。


##效果


code review帮助我们在代码质量方面取得不错的成绩。

1. crash率：本年度独立版的crash率呈明显下降趋势
![crash率](/images/codereview/1.jpeg)

2. P00用例通过率，整体由2016年的87.7%，提升到2017年的93.5%
![P00通过率](/images/codereview/2.jpeg)

3. 缺陷密度，由2016年的5.7降低到目前3.85
![缺陷密度](/images/codereview/3.jpeg)


##目的


1.端正编码态度

其他暂且不表，code review迫使大家尽力写出最好的代码。你写的每一行代码，都会有人来阅读，甚至被一群人围观评论，你还敢随心所欲？

2.业务梳理和人员备份

对于大部分复杂的业务逻辑，开发当事人最清楚。借code review的机会，把业务逻辑进行梳理，分享给大家，参与走查的同学都能成为该业务的备份者。如果和其他业务模块有冲突，也能及时发现。这样当你约会的时候才不至于每次被紧急问题叫回公司。所以如果找不到女朋友，请你思考是不是code review做的不够。

3.知识传递

给新同学看编码规范、注意事项，看完经常没感觉。但如果在代码走查，尤其是会议走查时，被提出几十个问题和整改建议，相信会记忆深刻。很多新同学，在第一次进行会议走查后，需要花费超过一周的时间来修改大家提出的问题，但这是值得的。

4.发现代码缺陷

这是code review最初始的目的，尤其是在修改别人代码的时候，一定要让原作者review，避免犯错。


##形式


我们鼓励大家用不同的方式进行code review，一般来说有这几种方式：

1.提交代码时带上--crby=review人。这样做操作简单又环保，很适合小规模的代码改动。review者可以在任何时间进行走查。

2.会议走查。一般大需求或者新同学用这种方式。虽然相比其他方式比较严肃，但在很多双眼睛的反复扫描之下，很多问题将会暴露：潜在的bug、编码不规范、架构不合理、注释不严谨、性能不够好...更重要的是，在有不同看法的时候，大家一起讨论，取长补短，扩展自己的认知。
![会议走查](/images/codereview/4.jpeg)

3.1v1 review。如果觉得会议走查太严肃的话，我们也很推荐这种方式。两个人坐在电脑前，互相讲解和审视，直接沟通，氛围温馨，增进感情...当然也可以1v2、1v3,完全没问题。
![1v1](/images/codereview/5.jpeg)

##Code Review时看什么？


- 架构是否合理

	是否遵循了设计模式的基本原则，具有良好的交互性、扩展性、复用性；代码是否易于理解和维护，和其他模块是否有过多耦合；接口暴露是否合理。
	
- 逻辑是否正确

	code review发起者先要向大家讲解业务背景和目标，然后说实现方案，最后再来看代码。按照这个套路，一般的逻辑问题不等别人提出，自己就先发现了。

- 是否处理了异常情况

	经验告诉我们，一般新版本外网的top问题，大都是没有处理异常导致的。比如没有判断传入的空参数、容器中加入了nil。

- 是否遵循编码规范

	code review是向新同学介绍编码规范的好机会。

- 是否有马虎导致的疏忽

	比如: NSInteger 写成 NSInteger *，BOOL 写成 BOOL *。

- 是否有warning

	虽然很多warning并不会影响结果的正确性，但warning就像定时炸弹一样，不知什么时候会导致严重问题。作为一个有洁癖的程序员，我们无法忍受自己的代码有warning。然后做为iOS程序员最痛苦的是，Xcode每次升级，原有干净整洁的代码都会产生数千个warning，需要花很多时间清理。

- 是否有更好的做法

	哪怕是简单的功能，完成之后我们也要想想是否有更好、更简单、更高效的方式解决。只有这样，才能不断进步。

##如何形成长效机制


相信大家都认可code review带来的好处，也知道如何进行review，但是如何把它作为一种团队传统，长期坚持，持续提升，这是个问题。我们的经验有以下几点：

1. 流程不要太重。程序猿都不喜欢流程，所以我们对code review的形式并没有要求。事实上，我们的大部分review都是在提交代码时顺手带上的，只有特定情况下才会发起会议走查（事实上会议室也很难订）
2. 奖励机制。我们有定期的走查达人评选，给予那些积极做code review，且发现问题多的同学会有一点点物质奖励。
3. 创建良好氛围。code review不是找茬，当不能达成共识时，要及时扩大讨论范围，避免两个人无意义地来回踢皮球。
4. 积累和总结。在code review中发现的共性问题，需要及时总结并分享，做到经验共享，互通有无。

